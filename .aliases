# Update git aliases
# Save a copy of the current aliases to a temporary file with a timestamp
# Download the latest version of the.aliases file from GitHub
# Reload the Oh My Zsh configuration
updategitaliases() {

cp ~/.aliases /tmp/.aliases-"`date +"%d-%m-%Y-%H-%M-%S"`"
wget https://raw.githubusercontent.com/jessegoodier/jesse-zsh-profile/main/.aliases -O ~/.aliases \
  && wget https://raw.githubusercontent.com/jessegoodier/jesse-zsh-profile/main/.vimrc -O ~/.vimrc \
  && wget https://raw.githubusercontent.com/jessegoodier/jesse-zsh-profile/main/.prompt.zsh -O ~/.prompt.zsh \
  && mkdir -p ~/.kube-scripts \
  && wget https://raw.githubusercontent.com/jessegoodier/kgc/main/kgc.sh -O ~/.kube-scripts/kgc.sh \
  && wget https://raw.githubusercontent.com/jessegoodier/jesse-zsh-profile/main/.kube-scripts/aliases.sh -O ~/.kube-scripts/aliases.sh \
  && wget https://raw.githubusercontent.com/jessegoodier/jesse-zsh-profile/main/.kube-scripts/get-all-aks-clusters.sh -O ~/.kube-scripts/get-all-aks-clusters.sh \
  && wget https://raw.githubusercontent.com/jessegoodier/jesse-zsh-profile/main/.kube-scripts/get-all-eks-clusters.sh -O ~/.kube-scripts/get-all-eks-clusters.sh \
  && wget https://raw.githubusercontent.com/jessegoodier/jesse-zsh-profile/main/.kube-scripts/get-all-gke-clusters.sh -O ~/.kube-scripts/get-all-gke-clusters.sh \
  && wget https://raw.githubusercontent.com/jessegoodier/jesse-zsh-profile/main/.kube-scripts/k-get-all-pod-images.sh -O ~/.kube-scripts/k-get-all-pod-images.sh \
  && wget https://raw.githubusercontent.com/jessegoodier/jesse-zsh-profile/main/.kube-scripts/k-remove-bad-contexts.sh -O ~/.kube-scripts/k-remove-bad-contexts.sh \
  && touch ~/.aliases-local
omz reload
}

# nightly all images
nai() {
  helm template kubecost-nightly --repo https://kubecost.github.io/nightly-helm-chart kubecost \
  --set networkCosts.enabled=true \
  --set clusterController.enabled=true \
  --set prometheus.server.global.external_labels.cluster_id=clusterid \
  --set kubecostModel.federatedStorageConfigSecret=test \
  --set global.platforms.cicd.enabled=true \
  --set global.platforms.cicd.skipSanityChecks=true \
    "$@" \
    --skip-tests | yq -r ".. | .image? | select(. != null)" | sort -u
}

# kubecost all images
kai() {
  helm template kubecost-ga --repo https://kubecost.github.io/cost-analyzer/ cost-analyzer \
  --set networkCosts.enabled=true \
  --set clusterController.enabled=true \
  --set prometheus.alertmanager.enabled=true \
  --set prometheus.server.enabled=true \
  --set prometheus.pushgateway.enabled=true \
  --set prometheus.nodeExporter.enabled=true \
  --set prometheus.configmapReload.prometheus.enabled=true \
    "$@" \
    --skip-tests | yq -r ".. | .image? | select(. != null)" | sort -u
}

if [ "$(command -v kubecolor)" ]; then
  alias kubectl="kubecolor"
  compdef kubecolor=kubectl
  alias watch='KUBECOLOR_FORCE_COLORS=true watch --color '
fi

if kubectl images --help 2>&1 | grep -q 'images' ; then
  alias ki="kubectl images"
fi

# Unalias the ksd command, which is a k scale deployment
unalias ksd 2>/dev/null
unalias hin 2>/dev/null
unalias hup 2>/dev/null

alias hru='helm repo update'
unalias hun 2>/dev/null
unalias hup 2>/dev/null
unalias hin 2>/dev/null

alias fed="kgsec federated-store -oyaml|ksd"


# Aliases
# List files in long format with hidden files and directories, and colorize the output
alias ll='ls -lah'
# Show the command history
alias h='history'
# Get information about Kubernetes resources
alias kg='kubectl get'
# Get nodes with labels
alias kgnol='kubectl get nodes --show-labels'
# Get endpoints
alias kgep='kubectl get ep'
# Describe a resource
alias kd='kubectl describe'
# Edit a StatefulSet
alias kests='kubectl edit sts'
# Find the image used in a pod
alias kdpi="kubectl get pods -o jsonpath='{.items[*].spec.containers[*].image}' | tr -s '[[:space:]]' '\n' | sort -u"
# Restart a deployment
alias krrd='kubectl rollout restart deployment'
# Restart a StatefulSet
alias krrsts='kubectl rollout restart sts'
# Get a list of StatefulSets
alias kgsts="kubectl get sts"
# Delete a StatefulSet
alias kdelsts="kubectl delete sts"

# Kubecost
# Get the logs for the cost-model container in the cost-analyzer pod
alias klcm="kubectl logs -l app.kubernetes.io/name=cost-analyzer --tail=-1 -c cost-model"
# Get the logs for the cost-analyzer-frontend container in the cost-analyzer pod
alias klfe="kubectl logs -l app=cost-analyzer --tail=-1 -c cost-analyzer-frontend"
# Get the logs for the cost-model container in the cost-analyzer pod, and follow the logs
alias klcmf="kubectl logs -l app=cost-analyzer -c cost-model --tail=-1 --follow"
# Get the logs for the cost-analyzer-frontend container in the cost-analyzer pod, and follow the logs
alias klfef="kubectl logs -l app=cost-analyzer -c cost-analyzer-frontend --tail=-1 --follow"
# Get the logs for the aggregator container in the aggregator pod
kla() {
  if [[ -n $(kubectl get pods -l app=aggregator -o name 2>/dev/null) ]]; then
    kubectl logs -l app=aggregator -c aggregator --tail=-1
  else
    kubectl logs -l app=cost-analyzer -c aggregator --tail=-1
  fi
}
klap() {
  if [[ -n $(kubectl get pods -l app=aggregator -o name 2>/dev/null) ]]; then
    kubectl logs -l app=aggregator -c aggregator --previous
  else
    kubectl logs -l app=cost-analyzer -c aggregator --previous
  fi
}

# Get the logs for the cost-model container in the cost-analyzer pod, and follow the logs
klaf() {
  if [[ -n $(kubectl get pods -l app=aggregator -o name 2>/dev/null) ]]; then
    kubectl logs -l app=aggregator -c aggregator --tail=-1 --follow
  else
    kubectl logs -l app=cost-analyzer -c aggregator --tail=-1 --follow
  fi
}

# Todo function to find the deployment
# Find the deployment named kubecost-cost-analyzer and execute the given command in the cost-analyzer-frontend container
alias kexecfe="kubectl exec -i -t deployment/kubecost-cost-analyzer -c cost-analyzer-frontend --" $1
# Find the deployment named kubecost-cost-analyzer and execute the given command in the cost-model container
alias kexeccm="kubectl exec -i -t deployment/kubecost-cost-analyzer -c cost-model --" $1

# Clean up unused images
# Remove any images that are not currently being used
alias drmi='docker rmi -f $(docker images -q)'
# Start a shell inside a container
alias deit='docker exec -i -t'

# Azure
# List all AKS clusters
alias azl='az aks list --output table'

# AWS
# List all EKS clusters
alias eks='eksctl get cluster'

# Randoms
# Clear the terminal screen
alias c='clear'

alias cat='bat --style=plain --paging=never'
# Send five ICMP ECHO_REQUEST packets and stop
alias ping='ping -c 5'
# Send 100 ICMP ECHO_REQUEST packets with a packet size of 0.2 seconds and do not wait one second between packets
alias fastping='ping -c 100 -s.2'
# Open a file with sudo permissions
alias svi='sudo vi'
# Pass options to the free command, such as showing memory usage in large units, showing the load average, and sorting by memory usage
alias meminfo='free -m -l -t'

# Get the top 5 processes by memory usage
alias psmem='ps auxf | sort -nr -k 4'
# Get the top 10 processes by memory usage
alias psmem10='ps auxf | sort -nr -k 4 | head -10'

# Get the top 5 processes by CPU usage
alias pscpu='ps auxf | sort -nr -k 3'
# Get the top 10 processes by CPU usage
alias pscpu10='ps auxf | sort -nr -k 3 | head -10'

# Get server CPU information
alias cpuinfo='lscpu'
# List the contents of the current directory in human-readable format and show the size of each file in KB, MB, GB, etc.
alias df='df -H'
# List the contents of the current directory in sorted order by size, and for each file, show the size in KB, MB, GB, etc.
alias du='du -sk * | sort -n | while read size fname; do for unit in k M G T P E Z Y; do if [ $size -lt 1024 ]; then echo -e "-${size}${unit}\t${fname}"; break; fi; size=$((size/1024)); done; done'

# If exa is installed, use it as the default ls command, with colorized output, icons, and additional information such as file type
if [ "$(command -v exa)" ]; then
  alias ll='exa -l --color always --icons -a -s type'
  alias l='exa --color always --icons -a -s type'
  alias la='exa -l --color always --icons -a -s type'
  alias ls='exa -G  --color auto --icons -a -s type'
fi

# Use grep with colorized output and exclude certain directories, such as.bzr, CVS,.git,.hg,.svn,.idea,.tox,.vscode-server-insiders,.vscode-server,.vscode-server-insiders, and.vs-kubernetes
# alias grep='grep --color=auto --exclude-dir={.bzr,CVS,.git,.hg,.svn,.idea,.tox,.vscode-server-insiders,.vscode-server,.vscode-server-insiders,.vs-kubernetes}'
# Use ack with colorized output and exclude the same directories as grep
# alias ack='ack --color --ignore-dir={.bzr,CVS,.git,.hg,.svn,.idea,.tox,.vscode-server-insiders,.vscode-server,.vscode-server-insiders,.vs-kubernetes}'

# More Kubernetes
# Get persistent volumes
alias kgpv='kubectl get pv'
# Watch persistent volumes
alias kgpvw='kubectl get pv --watch'
# Watch all pods in all namespaces
alias kgpaw='kubectl get pods --all-namespaces --watch'
# Watch all pods in the current namespace
alias kgpw='kubectl get pods --watch'
# Set the current namespace
alias kn='kubectl config set-context --current --namespace'
# Use a specific Kubernetes context
alias kc='kubectl config use-context'
# If kubectx is installed, use it as an alternative to kn and kc
if [ "$(command -v kubectx)" ]; then
  alias kn='kubens'
  alias kx='kubectx'
fi

# Get events, sorted by lastTimestamp, and only show events of type Normal. Though see: https://github.com/jessegoodier/kge
alias kgee="kubectl get events --sort-by=lastTimestamp --field-selector type!=Normal"
# kgc https://github.com/jessegoodier/kgc
# Start a shell inside a container
alias keit='kubectl exec -i -t'


alias gccl='gcloud container clusters list 2>/dev/null'
alias gcclj='gcloud container clusters list 2>/dev/null --filter=name:jesse --format="(name,location,currentNodeCount)"'


alias kgnow='kubectl get nodes --watch'
alias ccusage="npx ccusage blocks --live"

klabels() {
  local resource="${1:-pods}"
  kubectl get "$resource" -oyaml| \
  yq -r '.items[] | .metadata.name as $name | .metadata.labels | to_entries | .[] | [$name, (.key + "=" + .value)] | join("   ")' \
  | column -t
}

scurl() {
  curl -s -o /dev/null -w "%{http_code}\n" "$@"
}

pvenv() {
  python3 -m venv .venv
  source .venv/bin/activate
  pip install --upgrade pip
  pip install -r requirements.txt
  alias p="python3"
}

kcns() {
  kubectl create ns $1
  mkdir $1
  cd $1
  cp ../.kubeconfig .
  chmod 600 .kubeconfig
  kubectl config set-context --current --namespace="$1"
}

klagg() {
  podName="$(kubectl get pods -l app=aggregator -o jsonpath='{.items[0].metadata.name}')"
  kubectl logs "$podName" | less
}

keticm() {
  podName="$(kubectl get pods -l app=cost-analyzer -o jsonpath='{.items[0].metadata.name}')"
  kubectl exec -it "$podName" -c cost-model -- bash
}

ketiagg() {
  podName="$(kubectl get pods -l app=aggregator -o jsonpath='{.items[0].metadata.name}')"
  kubectl exec -it "$podName" -c aggregator -- bash
}

ketils() {
  podName="$(kubectl get pods -l app=aggregator -o jsonpath='{.items[0].metadata.name}')"
  kubecolor exec -it "$podName" -c aggregator -- ls -lah /var/configs/waterfowl/duckdb/v0_10_3
}
ketilsw() {
  podName="$(kubectl get pods -l app=aggregator -o jsonpath='{.items[0].metadata.name}')"
  watch kubectl exec -it "$podName" -c aggregator -- ls -lah /var/configs/waterfowl/duckdb/v0_10_3
}

# Comprehensive curl timing function with all variables
curltime() {
  local url="$1"
  if [ -z "$url" ]; then
    echo "Usage: curltime <url>"
    echo "Example: curltime 'https://example.com'"
    return 1
  fi
  
  curl -w "
     DNS Lookup:        %{time_namelookup}s
     TCP Connect:       %{time_connect}s
     TLS Handshake:     %{time_appconnect}s
     Pretransfer:       %{time_pretransfer}s
     Redirect:          %{time_redirect}s
     Start Transfer:    %{time_starttransfer}s
     Total:             %{time_total}s
     HTTP Code:         %{http_code}
     Size Download:     %{size_download} bytes
     Size Upload:       %{size_upload} bytes
     Speed Download:    %{speed_download} bytes/s
     Speed Upload:      %{speed_upload} bytes/s
     Content Type:      %{content_type}
     SSL Verify:        %{ssl_verify_result}
     Local IP:          %{local_ip}:%{local_port}
     Remote IP:         %{remote_ip}:%{remote_port}
     Effective URL:     %{url_effective}
     Redirect Count:    %{num_redirects}
     Redirect Time:     %{time_redirect}s
     Connect Time:      %{time_connect}s
     App Connect Time:  %{time_appconnect}s
     Pre Transfer Time: %{time_pretransfer}s
     Start Transfer:    %{time_starttransfer}s
     Name Lookup Time:  %{time_namelookup}s
     Total Time:        %{time_total}s
  " -o /dev/null -s "$url"
}



scan_image() {
    local image="$1"
    local image_type="$2"
    echo "Scanning $image_type image: $image"
    
    # Create safe filename for this image
    local safe_name=$(make_safe_filename "$image")
    
    # Do a single comprehensive scan that includes both OS and library vulnerabilities
    trivy image --format json --exit-code 0 --ignore-unfixed \
      --severity CRITICAL,HIGH,MEDIUM,LOW "$image" > "trivy_raw_${safe_name}.json"
    
    # Copy the raw scan to temp file for processing
    cp "trivy_raw_${safe_name}.json" "temp_scan.json"
    
    # Extract OS (base) and library (binary) vulnerabilities into separate sections
    # with proper null handling and default empty arrays
    jq --arg img "$image" --arg type "$image_type" '
      {
        "image": $img,
        "type": $type,
        "base_vulnerabilities": (
          [
            (.Results // [])[] | 
            select(.Type == "wolfi" or .Type == "ubuntu" or .Type == "debian" or 
                    .Type == "alpine" or .Type == "redhat" or .Type == "ubi") | 
            .Vulnerabilities // []
          ] | flatten | 
          group_by(.Severity) | 
          map({
            severity: .[0].Severity,
            count: length,
            vulnerabilities: map({
              id: .VulnerabilityID,
              package: .PkgName,
              version: .InstalledVersion
            })
          }) // []
        ),
        "binary_vulnerabilities": (
          [
            (.Results // [])[] | 
            select(.Type == "gobinary" or .Type == "jar" or .Type == "node-pkg") | 
            .Vulnerabilities // []
          ] | flatten |
          group_by(.Severity) |
          map({
            severity: .[0].Severity,
            count: length,
            vulnerabilities: map({
              id: .VulnerabilityID,
              package: .PkgName,
              version: .InstalledVersion
            })
          }) // []
        )
      }' temp_scan.json > "temp_result.json"
    
    # Append to main results file, creating an empty array if the file doesn't exist
    if [ ! -f scan_results.json ]; then
      echo "[]" > scan_results.json
    fi
    
    # Combine results, handling potential errors
    if jq -e . >/dev/null 2>&1 <<<"$(cat temp_result.json)"; then
      jq -s '.[0] + [.[1]]' scan_results.json temp_result.json > temp_combined.json && \
        mv temp_combined.json scan_results.json
    else
      echo "Error: Invalid JSON in temp_result.json for $image"
      return 1
    fi
  }

alias feder="bash /Users/jessegoodier/git/print-federated-store.sh"
alias kgevents="kubectl get events --sort-by='.metadata.creationTimestamp'"
alias kgeventsw="kubectl get events --sort-by='.metadata.creationTimestamp' -w"

alias whatsmyip='curl -s -X GET -4 https://ifconfig.co'
